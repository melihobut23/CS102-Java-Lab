/*
 * Creating Array for size 4 and doing some stuff about it
 * 
 * @Author Melih Obut
 * @Date 9.10.2019
 */
public class IntBag 
{
  private int[] ýntBag;
  private static final int SIZE = 4;
  private static final int NEGATIVE_VALUE = -1;
  
//Constructors
  public IntBag() {
    ýntBag = new int [SIZE];
    ýntBag[0] = NEGATIVE_VALUE;
  }

   /*
    * add method
    * @parameter int a
    */
  public void add(int index) 
  {
    int size = getSize();
    //case if bag is not full
    if (size < ýntBag.length - 1) 
    {
      ýntBag[size] = index;
      ýntBag[size + 1] = -1;
    }
    //case if bag is almost full
    else if (size == ýntBag.length - 1) 
    {
      ýntBag[size] = index;
    }
    //case if bag is full, extends the bag
    else {
      int newBag [] = new int[size * 2];
      for (int i = 0; i<ýntBag.length; i++){
        newBag[i] = ýntBag[i];
      }
      ýntBag = newBag;
      ýntBag[size] = index;
      ýntBag[size + 1] = -1;
      
    }
  }
     /*
    * More than size of Array and add sentinel value at the end.
    * 
    * @paramater number
    * @parameter index
    */
  public boolean add(int value, int index) {
    if (index < getSize()) {
      int last = ýntBag[ýntBag.length-1];
      
      for (int i = ýntBag.length - 2; i >= index; i--) {
        ýntBag[i + 1] = ýntBag[i];
      }
      ýntBag[index] = value;
      return true;
    }
    else
      return false;
  }
   
   /*
    * remove element from that index changing with
    * last element 
    * @parameter index
    */
  public void remove(int index) {
    /*
     for (int i = index; i < size() - 1; i++) {
     bag[i] = bag[i + 1];
     }
     bag[size() - 1] = -1;
     */
    ýntBag[index] = ýntBag[getSize()-1];
    ýntBag[getSize()-1] = -1;
    
  }
  
   /*
    * method for getting value in specified index
    * @parameter int index
    * @return int 
    */
  public int getValue(int k){
    return ýntBag[k];
  }
   

   /*
    * methods give size without zero
    * @return int
    */
  public int getSize() {
    int count = 0;
    boolean iteration = true;
    while (count < ýntBag.length && iteration) {
      if (get(count) != -1)
        count++;
      else
        iteration = false;
    }
    return count;
  }
// get the value at location i within the collection.
  public int get(int index) {
    return ýntBag[index];
  }
   /*
    * remove the specified elements from the list
    * @paramater int value
    */
  public void removeAll (int singleValue){
    int count = 0;
    for(int j = 0; j<getSize();){
      if (ýntBag[j] == singleValue){
        remove(j);
        count ++;
      }
      else
        j++;
    }
    if (count == 0);
    System.out.println("This number is not in the bag!");
  }
     /*
    * String represantation of the array
    * @return string 
    */
  public String toString() {
    String str = "";
    boolean write = true;
    for(int i = 0; i <= ýntBag.length - 1 && write; i++) {
      if (get(i) != -1)
        str = str + ýntBag[i] + " ";
      else
        write = false;
    }
    return str;
  }
}